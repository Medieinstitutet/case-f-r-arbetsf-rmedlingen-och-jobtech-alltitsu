import{r as s,c as t,h as i,g as n}from"./index-55b4449e.js";const a=class{constructor(e){s(this,e),this.afOnChange=t(this,"afOnChange",7),this.afOnIntersect=t(this,"afOnIntersect",7),this.afOnUnintersect=t(this,"afOnUnintersect",7),this._observer=null,this._hasIntersected=!1,this._isObserving=!1,this.afOnce=!1,this.afOptions={rootMargin:"0px",threshold:0}}afOptionsWatcher(e){this._afOptions=typeof e=="string"?JSON.parse(e):e}componentWillLoad(){this.afOptionsWatcher(this.afOptions),this.initObserver()}disconnectedCallback(){this._isObserving&&this.removeObserver()}initObserver(){this._observer=new IntersectionObserver(([e])=>{e&&e.isIntersecting?(this.intersectionHandler(),this.afOnce&&this.removeObserver()):e&&this._hasIntersected&&this.unintersectionHandler()},this._afOptions),this._observer.observe(this.$el),this._isObserving=!0}removeObserver(){this._observer.disconnect(),this._isObserving=!1}intersectionHandler(){this.afOnChange.emit(!0),this.afOnIntersect.emit(),this._hasIntersected=!0}unintersectionHandler(){this.afOnChange.emit(!1),this.afOnUnintersect.emit(),this._hasIntersected=!1}render(){return i("slot",null)}get $el(){return n(this)}static get watchers(){return{afOptions:["afOptionsWatcher"]}}};export{a as digi_util_intersection_observer};
